# GPT bundle - Parte 3
# Generado: 2025-10-07T19:26:43Z

=== FILE: components/SearchBar.tsx ===
```
'use client';
import React from "react";

type Props = {
  className?: string;
  onSubmit?: (q: string) => void;
  placeholder?: string;
};

export default function SearchBar({ className = "", onSubmit, placeholder = "Buscar productos…" }: Props) {
  const [q, setQ] = React.useState("");
  function submit() {
    (onSubmit ?? ((val) => alert(`(Demo) Buscar: ${val}`)))(q.trim());
  }
  return (
    <div className={`relative flex items-center ${className}`} role="search">
      <input
        value={q}
        onChange={(e) => setQ(e.target.value)}
        onKeyDown={(e) => { if (e.key === "Enter") submit(); }}
        aria-label="Buscar"
        placeholder={placeholder}
        className="w-full md:w-72 rounded-xl border px-3.5 py-2 pr-9 text-sm bg-white/90 shadow-sm placeholder:text-neutral-400 focus:outline-none focus:ring-2 focus:ring-lime-500"
      />
      <button
        type="button"
        onClick={submit}
        aria-label="Buscar"
        className="absolute right-1.5 inline-flex items-center justify-center size-8 rounded-lg hover:bg-neutral-100"
      >
        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" aria-hidden="true">
          <circle cx="11" cy="11" r="7" stroke="currentColor" strokeWidth="2"/>
          <path d="M20 20l-3.2-3.2" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
        </svg>
      </button>
    </div>
  );
}
```

=== FILE: components/SectionHeader.tsx ===
```
'use client';
type Props = { title: string; subtitle?: string; className?: string };
export default function SectionHeader({ title, subtitle, className="" }: Props){
  return (
    <header className={`mb-4 ${className}`}>
      <h2 className="section-title">{title}</h2>
      {subtitle ? <p className="section-sub mt-1">{subtitle}</p> : null}
    </header>
  );
}
```

=== FILE: components/Toast.tsx ===
```
'use client';
import React from "react";

export function Toast({ message }: { message: string }) {
  return (
    <div
      aria-live="polite"
      className="fixed right-4 bottom-4 bg-black/80 text-white px-4 py-2 rounded-xl shadow-lg text-sm"
    >
      {message}
    </div>
  );
}
```

=== FILE: components/TopBar.tsx ===
```
"use client";

import Link from "next/link";
import { useState } from "react";
import { ShoppingCart, Menu, X } from "lucide-react";
import Image from "next/image";
import SearchBar from "./SearchBar";

export default function TopBar() {
  const [menuOpen, setMenuOpen] = useState(false);

  return (
    <header className="sticky top-0 z-50 bg-white/80 backdrop-blur shadow-sm">
      <div className="mx-auto max-w-7xl px-4 sm:px-6 py-4 flex items-center justify-between">
        {/* Logo con ícono */}
        <Link href="/" className="flex items-center gap-2 text-xl font-bold text-lime-700">
          <Image
            src="/lunaria-icon.png" // o la URL de Supabase Storage si prefieres
            alt="Lunaria logo"
            width={28}
            height={28}
            className="rounded"
          />
          Lunaria
        </Link>

        {/* Buscador centrado en desktop */}
        <div className="hidden md:flex flex-1 justify-center mx-6">
          <SearchBar className="w-full max-w-md" />
        </div>

        {/* Navegación desktop */}
        <nav className="hidden md:flex items-center gap-6 text-sm font-medium text-gray-700">
          <Link href="/categorias" className="hover:text-lime-700">
            Categorías
          </Link>
          <Link href="/diag" className="hover:text-lime-700">
            Diag
          </Link>
          <Link
            href="/carro"
            className="relative flex items-center hover:text-lime-700"
          >
            <ShoppingCart className="w-5 h-5 mr-1" />
            Carrito
            <span className="absolute -top-2 -right-2 bg-lime-600 text-white text-xs rounded-full px-1">
              0
            </span>
          </Link>
        </nav>

        {/* Botón menú móvil */}
        <button
          className="md:hidden p-2 rounded hover:bg-gray-100"
          onClick={() => setMenuOpen(!menuOpen)}
        >
          {menuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
        </button>
      </div>

      {/* Menú móvil */}
      {menuOpen && (
        <div className="md:hidden bg-white border-t shadow-sm">
          <nav className="flex flex-col p-4 gap-4 text-gray-700">
            <Link href="/categorias" className="hover:text-lime-700">
              Categorías
            </Link>
            <Link href="/diag" className="hover:text-lime-700">
              Diag
            </Link>
            <Link href="/carro" className="hover:text-lime-700 flex items-center">
              <ShoppingCart className="w-5 h-5 mr-2" />
              Carrito
            </Link>
          </nav>
        </div>
      )}
    </header>
  );
}
```

=== FILE: components/TrustStrip.tsx ===
```
'use client';
import React from "react";

type TrustItem = {
  icon: React.ReactNode;
  text: string;
};

export default function TrustStrip({ items }: { items: TrustItem[] }) {
  if (!items || items.length === 0) return null;

  return (
    <section className="py-10">
      <ul className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
        {items.map((it, i) => (
          <li
            key={i}
            className="rounded-xl border bg-white shadow-md hover:shadow-lg transition px-5 py-4 flex items-center gap-3"
          >
            <span className="text-xl text-lime-600">{it.icon}</span>
            <span className="font-display font-semibold text-gray-800 tracking-tight leading-snug">{it.text}</span>
          </li>
        ))}
      </ul>
    </section>
  );
}
```

=== FILE: components/useCart.tsx ===
```
'use client';
import { useState, useEffect } from "react";

export function useCart() {
  const [items, setItems] = useState<any[]>(() => {
    try { return JSON.parse(localStorage.getItem("carro") || "[]"); } catch { return []; }
  });

  useEffect(() => {
    localStorage.setItem("carro", JSON.stringify(items));
    window.dispatchEvent(new Event("carro:updated"));
  }, [items]);

  function add(item: any) {
    setItems(prev => {
      const found = prev.find(p => p.id === item.id);
      if (found) return prev.map(p => p.id === item.id ? { ...p, qty: (p.qty || 1) + 1 } : p);
      return [...prev, { ...item, qty: 1 }];
    });
  }
  function remove(id: string) { setItems(prev => prev.filter(p => p.id !== id)); }
  function clear() { setItems([]); }

  return { items, add, remove, clear };
}
```

=== FILE: gpt_bundle_part_1.txt ===
```
# GPT bundle - Parte 1
# Generado: 2025-10-07T19:26:35Z

=== FILE: .github/pull_request_template.md ===
```
# Resumen
<!-- ¿Qué cambia y por qué? -->

## Tipo de cambio
- [ ] Fix (arreglo sin breaking)
- [ ] Feature (funcionalidad nueva)
- [ ] Refactor / DX
- [ ] Chore (build, deps, scripts)

## URL del Preview
<!-- Pega la URL del deployment de Vercel -->

## Riesgo / Impacto
<!-- Áreas afectadas y riesgos conocidos -->

## Plan de Rollback
<!-- ¿Cómo vuelvo a `stable/lunaria-ok` si algo falla? -->

---

## Checklist de Lunaria (NO merges sin esto)
**Categorías:** hogar, belleza, tecnologia, eco, mascotas, bienestar

- [ ] Se ven **12 tarjetas** por categoría (no 1, no 6).
- [ ] **Imágenes cargan** en todas las categorías.
- [ ] **Bienestar** muestra imágenes (sin placeholders amarillos).
- [ ] `components/ProductListClient.tsx` **no** fue modificado (o se justifica en el PR).
- [ ] `app/categorias/[slug]/page.tsx` mantiene el **slice/limit a 12**.
- [ ] `next.config.js` conserva `images.remotePatterns` y `unoptimized: true`.
- [ ] No se cambiaron nombres de columnas usadas por el front:
      `id, nombre, precio, imagen_url, envio, destacado, categoria_slug`.
- [ ] `/api/health` responde “ok” en el Preview.
- [ ] No hay errores en consola del navegador (Preview).
- [ ] Probado **deep-links** a cada categoría (sin 404).

## Notas de QA
<!-- Pasos de prueba manuales + capturas si aplica -->
```

=== FILE: .vscode/launch.json ===
```
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Ejecutar run.sh (task)",
      "type": "coreclr",          // un tipo válido cualquiera, no importa
      "request": "launch",
      "preLaunchTask": "Run run.sh"
    }
  ]
}
```

=== FILE: .vscode/tasks.json ===
```
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Run run.sh",
      "type": "shell",
      "command": "bash",
      "args": [
        "run.sh"
      ],
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": []
    },
    {
      "label": "build",
      "type": "npm",
      "script": "build",
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": []
    }
  ]
}
```

=== FILE: app/api/checkout/mercadopago/route.ts ===
```
import { NextResponse } from "next/server";
import { MercadoPagoConfig, Preference } from "mercadopago";

const client = new MercadoPagoConfig({
  accessToken: process.env.MP_ACCESS_TOKEN || "",
});

export async function POST(req: Request) {
  try {
    const body = await req.json();

    const preference = new Preference(client);

    const response = await preference.create({
      body: {
        items: (body.items || []).map((item: any) => ({
          title: item.title,
          quantity: item.quantity,
          currency_id: "CLP",
          unit_price: item.price,
        })),
        back_urls: {
          success: `${process.env.NEXT_PUBLIC_URL}/success`,
          failure: `${process.env.NEXT_PUBLIC_URL}/failure`,
          pending: `${process.env.NEXT_PUBLIC_URL}/pending`,
        },
        auto_return: "approved",
      },
    });

    return NextResponse.json({ id: response.id });
  } catch (err: any) {
    console.error("MercadoPago error:", err);
    return NextResponse.json(
      { error: "Error creando preferencia de pago" },
      { status: 500 }
    );
  }
}
```

=== FILE: app/api/health/route.ts ===
```
import { NextResponse } from "next/server";
export const runtime = "edge";
export async function GET() {
  const env = process.env.NEXT_PUBLIC_VERCEL_ENV || process.env.VERCEL_ENV || "production";
  const branch = process.env.NEXT_PUBLIC_VERCEL_GIT_COMMIT_REF || process.env.VERCEL_GIT_COMMIT_REF || null;
  const commit = process.env.NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA || process.env.VERCEL_GIT_COMMIT_SHA || null;
  const normalized = env === "preview" ? "preview" : (env === "development" ? "development" : "production");
  return NextResponse.json({ ok: true, env: normalized, branch, commit, ts: Date.now() });
}
```

=== FILE: app/api/imgcheck/route.ts ===
```
import { NextRequest, NextResponse } from "next/server";

export async function GET(req: NextRequest) {
  const u = req.nextUrl.searchParams.get("u");
  if (!u) return NextResponse.json({ ok:false, error:"missing u" }, { status: 400 });
  try{
    const r = await fetch(u, { method:"HEAD" });
    return NextResponse.json({ ok:r.ok, status:r.status, url:u });
  }catch(e:any){
    return NextResponse.json({ ok:false, error:String(e), url:u }, { status: 500 });
  }
}
```

=== FILE: app/carro/page.tsx ===
```
import CarroClient from "@/components/CarroClient";

export default function CarroPage() {
  return (
    <main className="max-w-6xl mx-auto px-6 py-10">
      <CarroClient />
    </main>
  );
}
```

=== FILE: app/categorias/[slug]/page.tsx ===
```
import { supabaseServer } from "@/lib/supabase/server";
import ProductCard from "@/components/ProductCard";
import Breadcrumb from "@/components/Breadcrumb";

export default async function CategoriaPage({ params }: { params: { slug: string } }) {
  const supabase = supabaseServer();

  // Obtener categoría
  const { data: categoriaData, error: catError } = await supabase
    .from("categories")
    .select("nombre, slug")
    .eq("slug", params.slug)
    .single();

  if (catError) {
    console.error("Error cargando categoría:", catError.message);
  }

  // Obtener productos de la categoría
  const { data: productos, error: prodError } = await supabase
    .from("products")
    .select("id, name, name_es, description, image_url, price_cents, category_slug") // 👈 añadimos name_es
    .eq("category_slug", params.slug);

  if (prodError) {
    console.error("Error cargando productos:", prodError.message);
  }

  const nombreCategoria = categoriaData?.nombre || "Categoría";

  return (
    <main className="mx-auto max-w-7xl px-4 sm:px-6 py-16">
      <Breadcrumb
        items={[
          { label: "Inicio", href: "/" },
          { label: "Categorías", href: "/categorias" },
          { label: nombreCategoria },
        ]}
      />

      <div className="text-center mb-12">
        <h1 className="text-4xl font-display font-bold tracking-tight text-gray-900">
          {nombreCategoria}
        </h1>
        <p className="mt-3 text-gray-600 max-w-2xl mx-auto">
          Explora los productos seleccionados para esta categoría.
        </p>
      </div>

      {!productos || productos.length === 0 ? (
        <div className="flex flex-col items-center justify-center py-16 text-gray-500 bg-gray-50 rounded-xl">
          <p className="text-lg font-medium">No hay productos en esta categoría.</p>
          <p className="text-sm mt-1">Vuelve pronto — estamos agregando nuevas colecciones.</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {productos.map((p) => (
            <ProductCard
              key={p.id}
              id={p.id}
              name={p.name}
              name_es={p.name_es}   // 👈 pasamos el traducido si existe
              image_url={p.image_url}
              price_cents={p.price_cents}
            />
          ))}
        </div>
      )}
    </main>
  );
}
```

=== FILE: app/categorias/page.tsx ===
```
import Link from "next/link";
import { getAllCategories } from "@/lib/categorias";
import Breadcrumb from "@/components/Breadcrumb";

export default async function Categorias() {
  const categorias = getAllCategories();

  return (
    <main className="mx-auto max-w-7xl px-4 sm:px-6 py-16">
      <Breadcrumb items={[{ label: "Inicio", href: "/" }, { label: "Categorías" }]} />

      {/* Hero de categorías */}
      <div className="text-center mb-12">
        <h1 className="text-4xl font-display font-bold tracking-tight text-gray-900">
          Categorías
        </h1>
        <p className="mt-3 text-gray-600 max-w-2xl mx-auto">
          Explora nuestras colecciones y encuentra productos que se adaptan a tu estilo de vida.
        </p>
      </div>

      {/* Grid de categorías */}
      <ul className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-6">
        {categorias.map((c, index) => (
          <li key={`${c.slug}-${index}`}>
            <Link
              href={`/categorias/${c.slug}`}
              className="group block bg-white rounded-xl shadow-sm hover:shadow-lg transition-all duration-300 hover:-translate-y-1"
            >
              <div className="aspect-[4/3] flex items-center justify-center bg-gray-50 rounded-t-xl overflow-hidden">
                <img
                  src={c.image_url}
                  alt={c.nombre}
                  className="w-14 h-14 object-contain transition-transform duration-300 group-hover:scale-110"
                />
              </div>
              <div className="p-4 text-center">
                <div className="text-base font-semibold text-gray-800 group-hover:text-lime-600 transition-colors">
                  {c.nombre}
                </div>
                <p className="text-sm text-gray-500 mt-1">Descubre más</p>
              </div>
            </Link>
          </li>
        ))}
      </ul>
    </main>
  );
}
```

=== FILE: app/debug/images/page.tsx ===
```
"use client";
import Image from "next/image";

export default function DebugImages() {
  const imgs = [
    { src: "/img/test1.jpg", alt: "Imagen de prueba 1" },
    { src: "/img/test2.jpg", alt: "Imagen de prueba 2" },
    { src: "/img/test3.jpg", alt: "Imagen de prueba 3" },
  ];

  return (
    <div className="grid grid-cols-2 md:grid-cols-3 gap-4 p-6">
      {imgs.map((img, idx) => (
        <div key={idx} className="rounded-xl overflow-hidden border">
          <Image
            src={img.src}
            alt={img.alt}
            width={400}
            height={300}
            className="object-cover w-full h-auto"
          />
        </div>
      ))}
    </div>
  );
}
```

=== FILE: app/diag/page.tsx ===
```
"use client";

export default function DiagPage() {
  const checks = [
    { label: "Conexión a Supabase", status: "OK" },
    { label: "Variables de entorno", status: "OK" },
    { label: "Build local", status: "OK" },
  ];

  return (
    <div className="max-w-3xl mx-auto px-6 py-10 space-y-6">
      <h1 className="text-2xl font-bold">Diagnóstico</h1>
      <ul className="space-y-3">
        {checks.map((c, idx) => (
          <li
            key={idx}
            className="flex items-center justify-between rounded-lg border p-3"
          >
            <span>{c.label}</span>
            <span
              className={
                c.status === "OK"
                  ? "text-green-600 font-semibold"
                  : "text-red-600 font-semibold"
              }
            >
              {c.status}
            </span>
          </li>
        ))}
      </ul>
    </div>
  );
}
```

=== FILE: app/error.tsx ===
```
"use client";

export default function ErrorPage() {
  return (
    <main className="max-w-5xl mx-auto px-4 py-20 text-center">
      <h1 className="text-3xl font-bold mb-4">Error inesperado</h1>
      <p className="text-gray-600 mb-6">
        Lo sentimos, algo salió mal. Intenta nuevamente más tarde.
      </p>
      <button
        onClick={() => location.reload()}
        className="px-4 py-2 bg-gray-200 rounded-lg"
      >
        Reintentar
      </button>
    </main>
  );
}
```

=== FILE: app/global-error.tsx ===
```
"use client";

export default function GlobalError() {
  return (
    <div className="mx-auto max-w-2xl px-4 sm:px-6 py-16 text-center">
      <h1 className="text-2xl font-bold">Ha ocurrido un error</h1>
      <div className="mt-6">
        <button
          onClick={() => location.reload()}
          className="px-4 py-2 bg-gray-200 rounded-lg"
        >
          Reintentar
        </button>
      </div>
    </div>
  );
}
```

=== FILE: app/globals.css ===
```
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-gray-50 text-gray-900 antialiased;
  font-family: 'Inter', sans-serif;
}

h1,h2,h3,h4,h5,h6 {
  @apply font-bold text-gray-900;
}

a {
  @apply text-emerald-700 hover:text-emerald-800 transition;
}

/* === LUNARIA: nivel1-estetica === */
/* Tipografías modernas sin tocar componentes: Inter (texto) + Poppins (titulares) */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=Poppins:wght@600;700&display=swap');

:root {
  /* Paleta discreta y consistente (ajustable si ya usas Tailwind theming) */
  --brand: #16a34a;         /* verde acción */
  --brand-600: #16a34a;
  --brand-700: #15803d;
  --ink: #0f172a;           /* slate-900 */
  --muted: #475569;         /* slate-600 */
  --card: #ffffff;
  --card-border: #e5e7eb;
  --shadow: 0 8px 24px rgba(0,0,0,.06);
  --shadow-lg: 0 12px 32px rgba(0,0,0,.10);
}

html, body {
  font-family: Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  color: var(--ink);
}

h1, h2, .hero-title, .section-title {
  font-family: Poppins, Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  letter-spacing: -0.01em;
}

/* Header pegado con fondo traslúcido y blur */
header, .site-header {
  position: sticky;
  top: 0;
  z-index: 50;
  background: rgba(255,255,255,0.7);
  backdrop-filter: saturate(1.2) blur(8px);
  border-bottom: 1px solid rgba(0,0,0,0.04);
}

/* Tarjetas (ProductListClient/ProductCard) — sombras y micro-animación */
.border.rounded-2xl,
.border.rounded-xl,
.card,
li.border.rounded-2xl,
div.border.rounded-2xl {
  transition: transform .18s ease, box-shadow .18s ease, border-color .18s ease;
  will-change: transform;
  border-color: var(--card-border);
}

.border.rounded-2xl:hover,
.border.rounded-xl:hover,
.card:hover,
li.border.rounded-2xl:hover,
div.border.rounded-2xl:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow);
  border-color: rgba(0,0,0,0.06);
}

/* Imagen dentro de la tarjeta: sutil zoom al hover */
.border.rounded-2xl .object-cover,
.border.rounded-xl .object-cover,
.card .object-cover {
  transition: transform .35s ease;
}

.border.rounded-2xl:hover .object-cover,
.border.rounded-xl:hover .object-cover,
```

=== FILE: gpt_bundle_part_1.txt ===
```
.card:hover .object-cover {
  transform: scale(1.03);
}

/* Botones principales: color consistente y feedback */
button,
a.button,
.btn,
[class*="bg-lime-600"],
[class*="bg-green-600"] {
  transition: background-color .15s ease, box-shadow .15s ease, transform .15s ease;
}

button:hover,
a.button:hover,
.btn:hover,
[class*="bg-lime-600"]:hover,
[class*="bg-green-600"]:hover {
  filter: brightness(0.98);
  box-shadow: 0 6px 16px rgba(22,163,74,0.18);
}

button:active,
a.button:active,
.btn:active {
  transform: translateY(1px);
}

/* Links de categorías (tiles) — resalte al hover */
a[data-cat], .cat-tile {
  transition: transform .18s ease, box-shadow .18s ease;
}

a[data-cat]:hover, .cat-tile:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow);
}

/* Fajas de confianza: mejor legibilidad */
.trust-strip, .trust-belt, .features-row {
  color: var(--muted);
}

/* Fin nivel1-estetica */

/* === Nivel 3 Visual: Animaciones y helpers === */
@keyframes lnr-fade-up {
  0% { opacity: 0; transform: translateY(10px) scale(.98); }
  100% { opacity: 1; transform: translateY(0) scale(1); }
}
@keyframes lnr-fade-in {
  0% { opacity: 0 }
  100% { opacity: 1 }
}
@keyframes lnr-shine {
  0% { transform: translateX(-150%) }
  100% { transform: translateX(150%) }
}
.lnr-appear { animation: lnr-fade-up .5s ease-out both; }
.lnr-appear-slow { animation: lnr-fade-up .7s ease-out both; }
.lnr-appear-delay { animation-delay: .12s }
.lnr-appear-delay-lg { animation-delay: .2s }

.card-3d {
  transition: transform .25s ease, box-shadow .25s ease;
  will-change: transform;
}
.card-3d:hover {
  transform: translateY(-2px) scale(1.01);
  box-shadow: 0 12px 30px -12px rgb(0 0 0 / .25);
}
.img-zoom {
  transform: scale(1.02);
  transition: transform .5s ease, filter .5s ease;
}
.group:hover .img-zoom { transform: scale(1.08); }

.lnr-overlay-grad {
  background: linear-gradient(180deg, rgba(0,0,0,.0) 30%, rgba(0,0,0,.35) 75%, rgba(0,0,0,.55) 100%);
}

.lnr-shimmer {
  position: relative;
  overflow: hidden;
}
.lnr-shimmer::after {
  content: "";
  position: absolute; inset: 0;
  transform: translateX(-150%);
  background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,.18) 45%, rgba(255,255,255,0) 70%);
  animation: lnr-shine 1.25s ease-in-out infinite;
}

.badge-pill {
  border-radius: 9999px;
  padding: .35rem .6rem;
  font-weight: 600;
  font-size: .8rem;
}

/* Botón verde consistente con “Explorar categorías” */
.btn-brand {
  @apply inline-flex items-center gap-2 rounded-xl bg-lime-600 text-white px-3 py-2 hover:bg-lime-700 transition;
}

/* Etiqueta en tiles de categorías */
.cat-chip {
  @apply inline-flex items-center gap-2 rounded-xl bg-lime-600/95 text-white px-3 py-1.5 shadow-md;
}

/* === LUNARIA: visual-pack-level4 (do not remove) === */
/* Paleta y tokens */
:root {
  /* mismo verde que usamos en el Hero (lime-600 aprox) */
  --brand-green: #65a30d;
  --brand-green-600: #65a30d;
  --brand-green-700: #4d7c0f;
  --brand-ink: #0b0f19;
  --card-shadow: 0 8px 24px rgba(15, 23, 42, 0.08);
  --card-shadow-hover: 0 16px 40px rgba(15, 23, 42, 0.12);
}

/* Micro-animaciones base */
@keyframes lunaria-fade-in-up {
  from { opacity: 0; transform: translateY(8px); }
  to   { opacity: 1; transform: translateY(0); }
}

/* Botón/etiqueta de marca (para sobre-imagen o badges) */
.lunaria-btn,
.badge-brand {
  display: inline-flex;
  align-items: center;
  gap: .5rem;
  padding: .45rem .8rem;
  font-weight: 600;
  border-radius: 9999px;
  color: #fff;
  background-color: var(--brand-green);
  box-shadow: 0 4px 16px rgba(101,163,13,.25);
  transition: transform .12s ease, box-shadow .12s ease, background-color .12s ease;
}
.lunaria-btn:hover,
.badge-brand:hover {
  transform: translateY(-1px);
  background-color: var(--brand-green-700);
  box-shadow: 0 8px 24px rgba(101,163,13,.35);
}

/* Cards genéricas (product tiles, etc.) */
:where(.grid) :where(.border.rounded-2xl) {
  border-color: rgba(2,6,23,.06); /* slate-950/6 */
  transition: transform .18s ease, box-shadow .18s ease, border-color .18s ease, background-color .18s ease;
  box-shadow: var(--card-shadow);
  background: #fff;
}
:where(.grid) :where(.border.rounded-2xl):hover {
  transform: translateY(-2px);
  box-shadow: var(--card-shadow-hover);
  border-color: rgba(2,6,23,.10);
}

/* Imágenes en grillas 4:3 con zoom suave al hover */
:where(.aspect-\[4\/3\]) img,
:where(.aspect-\[4\/3\]) .object-cover {
  transition: transform .35s ease, filter .35s ease;
  will-change: transform;
}
:where(li,div).border.rounded-2xl:hover :where(.aspect-\[4\/3\]) img,
:where(li,div).border.rounded-2xl:hover :where(.aspect-\[4\/3\]) .object-cover {
  transform: scale(1.03);
}

/* Precio destacado y tipografía suave */
.lunaria-price {
  color: var(--brand-green-700);
  font-weight: 800;
  letter-spacing: .1px;
}

/* Títulos compactos y legibles */
.lunaria-title {
  font-weight: 700;
  letter-spacing: .2px;
  color: var(--brand-ink);
}

/* Sutil divider entre info y CTA */
.lunaria-divider {
  height: 1px;
  background: linear-gradient(90deg, transparent, rgba(2,6,23,.08), transparent);
  margin: .5rem 0;
}

/* Hover de CTA negro (coherente con el tema actual) */
.lunaria-cta {
  background: #0b0f19;
  color: #fff;
  border-radius: .75rem;
  transition: transform .12s ease, box-shadow .12s ease, background-color .12s ease;
}
.lunaria-cta:hover {
  transform: translateY(-1px);
  background: #111827;
  box-shadow: 0 10px 24px rgba(17,24,39,.22);
}

/* Etiquetas sobre tiles de categorías: centradas y legibles */
.lunaria-cat-chip {
  position: absolute;
  left: 50%;
  bottom: .9rem;
  transform: translateX(-50%);
  z-index: 2;
  backdrop-filter: saturate(120%) blur(4px);
}
.lunaria-cat-chip .icon {
  display: inline-block;
  width: 1rem; height: 1rem;
}

/* Pequeño efecto parallax óptico al pasar el mouse */
.lunaria-tilt:hover { transform: perspective(900px) translateZ(0) rotateX(.6deg) rotateY(.6deg); }

/* Animación de aparición para grids */
.lunaria-grid-in > * {
  animation: lunaria-fade-in-up .35s ease both;
}
.lunaria-grid-in > *:nth-child(2) { animation-delay: .02s; }
.lunaria-grid-in > *:nth-child(3) { animation-delay: .04s; }
.lunaria-grid-in > *:nth-child(4) { animation-delay: .06s; }
.lunaria-grid-in > *:nth-child(5) { animation-delay: .08s; }
.lunaria-grid-in > *:nth-child(6) { animation-delay: .10s; }

/* Hero CTA: asegura el mismo verde global */
.lunaria-hero-cta {
  background-color: var(--brand-green) !important;
}
.lunaria-hero-cta:hover {
  background-color: var(--brand-green-700) !important;
}

/* Protección por si el texto de categorías queda oscuro sobre imágenes */
.lunaria-text-shadow {
  text-shadow: 0 1px 8px rgba(0,0,0,.35), 0 0 1px rgba(0,0,0,.6);
}

/* === /LUNARIA: visual-pack-level4 === */

/* tokens lunaria (idempotente) */
:root{
  --lunaria-green:#3eb489;
  --lunaria-green-hover:#36a178;
}

/* --- Neutraliza cualquier pseudo-badge que duplique el contador del carrito --- */
[data-testid="floating-cart"]::after,
[data-testid="floating-cart"]::before {
  content: none !important;
}

/* ========== Visual Pack Nivel 7–9 (no logic) ========== */
:root {
  --lunaria-radius-xl: 1.25rem;
  --lunaria-shadow-sm: 0 2px 10px rgba(0,0,0,.06);
  --lunaria-shadow-md: 0 6px 24px rgba(0,0,0,.08);
  --lunaria-shadow-lg: 0 12px 40px rgba(0,0,0,.12);
  --lunaria-anim-fast: 180ms;
  --lunaria-anim-med: 280ms;
}

/* Tipografía un poco más “retail” */
html {
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Tarjetas (categorías y productos) — hover sutil + elevación */
.grid .border.rounded-2xl,
.grid .rounded-2xl.border {
  border-radius: var(--lunaria-radius-xl) !important;
  box-shadow: var(--lunaria-shadow-sm);
  transition: transform var(--lunaria-anim-med) ease, box-shadow var(--lunaria-anim-med) ease, filter var(--lunaria-anim-med) ease;
  will-change: transform, box-shadow, filter;
  background: #fff;
}

.grid .border.rounded-2xl:hover,
.grid .rounded-2xl.border:hover {
  transform: translateY(-3px);
  box-shadow: var(--lunaria-shadow-md);
}

/* Imágenes dentro de tarjetas: zoom y “shine” suave */
.grid .border.rounded-2xl .bg-gray-100,
.grid .rounded-2xl.border .bg-gray-100 {
  overflow: hidden;
  position: relative;
}

.grid .border.rounded-2xl img,
.grid .rounded-2xl.border img {
  transition: transform var(--lunaria-anim-med) ease, filter var(--lunaria-anim-med) ease;
  will-change: transform, filter;
}

.grid .border.rounded-2xl:hover img,
.grid .rounded-2xl.border:hover img {
  transform: scale(1.03);
  filter: saturate(1.05) contrast(1.03);
}

/* Efecto “shine” diagonal opcional */
.grid .border.rounded-2xl .bg-gray-100::after,
.grid .rounded-2xl.border .bg-gray-100::after {
  content: "";
  position: absolute;
  inset: 0;
  background: linear-gradient(115deg, rgba(255,255,255,0) 20%, rgba(255,255,255,.18) 45%, rgba(255,255,255,0) 70%);
  transform: translateX(-120%);
  transition: transform 700ms ease;
  pointer-events: none;
}

@media (hover:hover) {
  .grid .border.rounded-2xl:hover .bg-gray-100::after,
  .grid .rounded-2xl.border:hover .bg-gray-100::after {
    transform: translateX(120%);
  }
}

/* Botones primarios coherentes (verde oficial del Hero) */
:root {
  --lunaria-green: #16a34a;       /* Tailwind green-600 del botón "Explorar categorías" */
  --lunaria-green-hover: #15803d; /* green-700 */
}

.btn-primary,
button.bg-lime-600,
a.bg-lime-600 {
  background-color: var(--lunaria-green) !important;
  color: #fff !important;
  border-radius: 0.85rem !important;
  box-shadow: 0 8px 18px rgba(22,163,74,.22);
  transition: transform var(--lunaria-anim-fast) ease, box-shadow var(--lunaria-anim-fast) ease, background-color var(--lunaria-anim-fast) ease;
}

.btn-primary:hover,
button.bg-lime-600:hover,
a.bg-lime-600:hover {
  background-color: var(--lunaria-green-hover) !important;
  transform: translateY(-1px);
  box-shadow: 0 10px 22px rgba(21,128,61,.28);
}

/* Badges / chips (envío, destacado) */
.badge,
p.text-sm.text-gray-600 {
  display: inline-flex;
  align-items: center;
  gap: .4rem;
  padding: .18rem .6rem;
  border-radius: 999px;
  background: rgba(16, 185, 129, .08); /* emerald-500/08 */
  color: #065f46; /* emerald-800 */
  font-weight: 600;
}

/* Header/sticky pulido (si existe sticky en tu layout) */
.sticky-header {
  backdrop-filter: saturate(1.2) blur(6px);
  background-color: rgba(255,255,255,.72);
  box-shadow: 0 2px 12px rgba(0,0,0,.05);
}

/* Micro animación para iconos (categorías) */
.category-icon {
  transition: transform var(--lunaria-anim-fast) ease;
}
.category-icon:hover {
  transform: scale(1.08) rotate(-1deg);
}

/* CTA en hero: ligero “breathing” */
@media (prefers-reduced-motion: no-preference) {
  .hero-cta-breathe {
    animation: breathe 3.2s ease-in-out infinite;
  }
  @keyframes breathe {
    0%   { transform: translateY(0) scale(1); box-shadow: var(--lunaria-shadow-md); }
    50%  { transform: translateY(-1px) scale(1.01); box-shadow: var(--lunaria-shadow-lg); }
    100% { transform: translateY(0) scale(1); box-shadow: var(--lunaria-shadow-md); }
  }
}

/* Sombra fine-grain al mover el mouse (soporte amplio usando :hover) */
.card-hover:hover {
  box-shadow: var(--lunaria-shadow-lg);
}

/* Foco accesible bonito */
:focus-visible {
  outline: 3px solid rgba(22,163,74,.45);
  outline-offset: 3px;
  border-radius: 8px;
}

/* ========== /Visual Pack Nivel 7–9 ========== */

/* === NIVEL100:BEGIN === */
/* Paleta y motion helpers (no invasivo) */
:root {
  --lnr-green: #3e8e41; /* verde hero */
  --lnr-green-ink: #2f6b32;
  --lnr-ink: #0f172a;   /* neutral-900 */
```

=== FILE: app/globals.css ===
```
  --lnr-card: 255,255,255;
  --lnr-shadow: 15 23 42; /* slate-900 */
}

/* Suaviza todo */
html { scroll-behavior: smooth; }

/* Cards genéricas: .border.rounded-2xl */
.border.rounded-2xl {
  transition:
    transform 220ms cubic-bezier(.2,.7,.2,1),
    box-shadow 220ms cubic-bezier(.2,.7,.2,1),
    background-color 220ms ease;
  will-change: transform, box-shadow;
  background-color: rgba(var(--lnr-card),1);
  box-shadow:
    0 1px 2px rgba(var(--lnr-shadow)/0.06),
    0 8px 24px rgba(var(--lnr-shadow)/0.04);
}
.border.rounded-2xl:hover {
  transform: translateY(-4px);
  box-shadow:
    0 6px 16px rgba(var(--lnr-shadow)/0.06),
    0 18px 48px rgba(var(--lnr-shadow)/0.08);
}

/* Imágenes dentro de cards: zoom sutil al hover del contenedor */
.border.rounded-2xl img,
.border.rounded-2xl picture img {
  transition: transform 300ms ease, filter 300ms ease, opacity 200ms ease;
  will-change: transform, filter;
}
.border.rounded-2xl:hover img {
  transform: scale(1.03);
  filter: saturate(1.05);
}

/* Botones “primarios” por patrón de color verde hero */
button.bg-lime-600,
a.bg-lime-600,
[class*="bg-lime-600"] {
  background-color: var(--lnr-green) !important;
  border-color: var(--lnr-green-ink) !important;
  transition: transform 150ms ease, box-shadow 150ms ease, background-color 150ms ease;
  box-shadow: 0 4px 14px rgba(62,142,65,.15);
}
button.bg-lime-600:hover,
a.bg-lime-600:hover,
[class*="bg-lime-600"]:hover {
  background-color: var(--lnr-green-ink) !important;
  transform: translateY(-1px);
  box-shadow: 0 8px 22px rgba(62,142,65,.25);
}
button.bg-lime-600:active,
a.bg-lime-600:active,
[class*="bg-lime-600"]:active {
  transform: translateY(0);
  box-shadow: 0 3px 10px rgba(62,142,65,.18);
}

/* Etiquetas de categoría “pill” si van dentro de tiles */
.badge-pill,
[class*="badge"][class*="pill"] {
  background: linear-gradient(180deg, var(--lnr-green), var(--lnr-green-ink));
  color: #fff;
  border-radius: 9999px;
  box-shadow: 0 6px 20px rgba(62,142,65,.25);
}

/* Skeleton shimmer reutilizable (añade class="skeleton" a placeholders si lo necesitas) */
@keyframes lnr-shimmer {
  0% { background-position: -200% 0; }
  100% { background-position: 200% 0; }
}
.skeleton {
  position: relative;
  overflow: hidden;
  background: linear-gradient(90deg,
    rgba(226,232,240,.7) 0%,
    rgba(241,245,249,.9) 20%,
```

=== FILE: gpt_bundle_part_1.txt ===
```
    rgba(226,232,240,.7) 40%,
    rgba(226,232,240,.7) 100%);
  background-size: 200% 100%;
  animation: lnr-shimmer 1.2s infinite linear;
}

/* Micro bounce al agregar al carro (aplica a .added-bounce si la pones en el botón tras click) */
@keyframes lnr-bounce {
  0% { transform: scale(1); }
  30% { transform: scale(1.08); }
  60% { transform: scale(0.98); }
  100% { transform: scale(1); }
}
.added-bounce { animation: lnr-bounce 360ms cubic-bezier(.2,.7,.2,1); }

/* Back-to-top si existe un #backToTop */
#backToTop {
  transition: opacity .2s ease, transform .2s ease;
  box-shadow: 0 8px 24px rgba(15,23,42,.18);
}
#backToTop:hover { transform: translateY(-2px); }

/* Grid hover: realzar item activo */
.grid > *:hover { position: relative; z-index: 2; }

/* Hero: sutil parallax sobre imágenes directas */
.hero img { transition: transform 600ms cubic-bezier(.2,.7,.2,1); will-change: transform; }
.hero:hover img { transform: scale(1.02); }
/* === NIVEL100:END === */


/* === Nivel 9999999: Parallax + Gradiente Animado (solo visual) === */
@keyframes lunariaGradientPulse {
  0%   { opacity: .65; }
  50%  { opacity: .85; }
  100% { opacity: .65; }
}




/* Respeto accesibilidad (reduce motion) */

/* Botón “Explorar categorías” – reforzamos feeling premium sin cambiar tu verde */
.lunaria-cta {
  transition: transform .2s ease, box-shadow .2s ease;
  box-shadow: 0 8px 20px rgba(101,163,13,0.25);
}
.lunaria-cta:hover {
  transform: translateY(-1px);
  box-shadow: 0 10px 24px rgba(101,163,13,0.33);
}

/* Copete del hero con un toque de brillo sutil */
.lunaria-hero-subtle {
  text-shadow: 0 1px 0 rgba(255,255,255,.6);
}
/* === Fin Nivel 9999999 === */

/* === A11y & Micro-UX (bundle) === */
:focus-visible {
  outline: 3px solid #2ECC71;
  outline-offset: 2px;
  border-radius: .5rem;
}
html { scroll-behavior: smooth; }

/* Helpers de contraste en chips/badges si hiciera falta */
.badge-contrast {
  text-shadow: 0 1px 1px rgba(0,0,0,.25);
}

/* Skeleton util (por si queremos placeholder más tarde) */
.skeleton {
  position: relative;
  overflow: hidden;
  background: #f2f2f2;
}
.skeleton::after {
  content: "";
  position: absolute;
  inset: 0;
  transform: translateX(-100%);
  background: linear-gradient(90deg, transparent, rgba(0,0,0,.06), transparent);
  animation: skeleton-shimmer 1.1s infinite;
}
@keyframes skeleton-shimmer {
  100% { transform: translateX(100%); }
}

/* === BackToTop: forzar visibilidad y evitar solape con carrito === */
:where(.back-to-top, #backtotop, [data-backtotop], a[href="#top"]){
  position: fixed !important;
  left: 1rem !important;
  right: auto !important;
  bottom: 1rem !important;
  transform: none !important;
  opacity: 1 !important;
  visibility: visible !important;
  pointer-events: auto !important;
  display: inline-flex !important;
  align-items: center;
  justify-content: center;
  z-index: 95 !important;
  border-radius: 9999px;
  box-shadow: 0 6px 18px rgba(0,0,0,.12);
}
@media (min-width: 768px){
  :where(.back-to-top, #backtotop, [data-backtotop], a[href="#top"]){
    left: auto !important;
    right: 6.5rem !important; /* offset para FloatingCart */
  }
}
@supports (padding: env(safe-area-inset-bottom)){
  :where(.back-to-top, #backtotop, [data-backtotop], a[href="#top"]){
    bottom: calc(1rem + env(safe-area-inset-bottom)) !important;
  }
}

/* breadcrumbs */
.breadcrumb-hero {
  /* separador opcional si se usa sobre fondos */
  text-shadow: 0 1px 0 rgba(255,255,255,.8);
}

/* títulos de sección home pro */
.section-title {
  @apply text-xl sm:text-2xl font-semibold tracking-tight;
}
.section-sub {
  @apply text-gray-600 text-sm;
}

/* PARALLAX UTILITIES */
.parallax-root { perspective: 1000px; }
.parallax-scene { transform-style: preserve-3d; height: 100%; position: relative; }
.parallax-bg {
  position: absolute; inset: 0;
  background-position: center; background-size: cover; background-repeat: no-repeat;
  transform: translateZ(-300px) scale(1.35);
  will-change: transform;
  filter: saturate(105%) contrast(102%);
}
.parallax-fg { position: relative; z-index: 1; }
@media (min-width: 768px) {
  /* Fallback extra suave por si el navegador ignora 3D: */
  .parallax-bg-fixed { background-attachment: fixed; }
}

/* PARALLAX UTILITIES v2 */
.parallax-root { perspective: 800px; }
.parallax-scene { transform-style: preserve-3d; height: 100%; position: relative; }
.parallax-bg {
  position: absolute; inset: 0;
  background-position: center 30%;
  background-size: cover;
  background-repeat: no-repeat;
  transform: translateZ(-120px) scale(1.12);
  will-change: transform;
  transition: transform 300ms ease-out;
  filter: saturate(104%) contrast(102%);
}
/* Suaviza bordes y da respiro visual */
.hero-clip { border-radius: 1rem; overflow: hidden; }
/* Degradado más sutil (menos “leche” sobre la foto) */
.hero-fade::after{
  content:"";
  position:absolute; inset:0;
  background: linear-gradient(to top, rgba(255,255,255,0.9) 0%, rgba(255,255,255,0.55) 45%, rgba(255,255,255,0.15) 100%);
  pointer-events:none;
}
/* En móviles desactivamos 3D: se ve más limpio */
@media (max-width: 767px) {
  .parallax-root { perspective: none; }
  .parallax-scene { transform-style: flat; }
  .parallax-bg { transform: none; }
  .parallax-bg-fixed { background-attachment: scroll; }
}
/* Respeto a usuarios con reduce-motion */

/* Respeto accesibilidad (reduce motion) */

/* Hero parallax limpio */



/* Respeto accesibilidad (reduce motion) */

/* Hero parallax limpio */



/* Respeto accesibilidad (reduce motion) */

/* Respeto accesibilidad (reduce motion) */

/* Hero parallax con imagen Supabase (limpio y acotado) */



/* Respeto accesibilidad (reduce motion) */

/* Respeto accesibilidad (reduce motion) */


/* Respeto accesibilidad (reduce motion) */

/* === Hero parallax con imagen Supabase (limpio y único) === */
/* Contenedor: el ::before pinta el fondo. La altura/offset se definen en TSX. */
.lunaria-parallax {
  position: relative;
  overflow: hidden;
}

/* Fondo del Hero (imagen desde Supabase) */
.lunaria-parallax::before {
  content: "";
  position: absolute;
  inset: 0;
  background-image: url("https://iowpylofmfzlbvlhlqih.supabase.co/storage/v1/object/public/branding/hero/hero.png");
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  /* Orden de capas: fondo z-0, overlay z-10 (en TSX), contenido z-20 */
  z-index: 0;
  pointer-events: none;

  /* Nitidez y respuesta */
  image-rendering: crisp-edges;
  filter: saturate(1.15) contrast(1.1);
  transition: transform 1.2s ease, filter 0.5s ease;
}

/* Hover sutil (parallax óptico) */
.lunaria-parallax:hover::before {
  transform: scale(1.05) translateY(-5px);
  filter: saturate(1.2) contrast(1.15);
}

/* Accesibilidad: reducir movimiento */
@media (prefers-reduced-motion: reduce) {
  .lunaria-parallax::after { animation: none; }
  .lunaria-parallax::before { transform: none !important; background-attachment: scroll; }
}
```

=== FILE: app/globalsCSS.txt ===
```
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-gray-50 text-gray-900 antialiased;
  font-family: 'Inter', sans-serif;
}

h1,h2,h3,h4,h5,h6 {
  @apply font-bold text-gray-900;
}

a {
  @apply text-emerald-700 hover:text-emerald-800 transition;
}

/* === LUNARIA: nivel1-estetica === */
/* Tipografías modernas sin tocar componentes: Inter (texto) + Poppins (titulares) */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=Poppins:wght@600;700&display=swap');

:root {
  /* Paleta discreta y consistente (ajustable si ya usas Tailwind theming) */
  --brand: #16a34a;         /* verde acción */
  --brand-600: #16a34a;
  --brand-700: #15803d;
  --ink: #0f172a;           /* slate-900 */
  --muted: #475569;         /* slate-600 */
  --card: #ffffff;
  --card-border: #e5e7eb;
  --shadow: 0 8px 24px rgba(0,0,0,.06);
  --shadow-lg: 0 12px 32px rgba(0,0,0,.10);
}

html, body {
  font-family: Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  color: var(--ink);
}

h1, h2, .hero-title, .section-title {
  font-family: Poppins, Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  letter-spacing: -0.01em;
}

/* Header pegado con fondo traslúcido y blur */
header, .site-header {
  position: sticky;
  top: 0;
  z-index: 50;
  background: rgba(255,255,255,0.7);
  backdrop-filter: saturate(1.2) blur(8px);
  border-bottom: 1px solid rgba(0,0,0,0.04);
}

/* Tarjetas (ProductListClient/ProductCard) — sombras y micro-animación */
.border.rounded-2xl,
.border.rounded-xl,
.card,
li.border.rounded-2xl,
div.border.rounded-2xl {
  transition: transform .18s ease, box-shadow .18s ease, border-color .18s ease;
  will-change: transform;
  border-color: var(--card-border);
}

.border.rounded-2xl:hover,
.border.rounded-xl:hover,
.card:hover,
li.border.rounded-2xl:hover,
div.border.rounded-2xl:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow);
  border-color: rgba(0,0,0,0.06);
}

/* Imagen dentro de la tarjeta: sutil zoom al hover */
.border.rounded-2xl .object-cover,
.border.rounded-xl .object-cover,
.card .object-cover {
  transition: transform .35s ease;
}

.border.rounded-2xl:hover .object-cover,
.border.rounded-xl:hover .object-cover,
.card:hover .object-cover {
  transform: scale(1.03);
}

/* Botones principales: color consistente y feedback */
button,
a.button,
.btn,
[class*="bg-lime-600"],
[class*="bg-green-600"] {
  transition: background-color .15s ease, box-shadow .15s ease, transform .15s ease;
}

button:hover,
a.button:hover,
.btn:hover,
[class*="bg-lime-600"]:hover,
[class*="bg-green-600"]:hover {
  filter: brightness(0.98);
  box-shadow: 0 6px 16px rgba(22,163,74,0.18);
}

button:active,
a.button:active,
.btn:active {
  transform: translateY(1px);
}

/* Links de categorías (tiles) — resalte al hover */
a[data-cat], .cat-tile {
  transition: transform .18s ease, box-shadow .18s ease;
}

a[data-cat]:hover, .cat-tile:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow);
}

/* Fajas de confianza: mejor legibilidad */
.trust-strip, .trust-belt, .features-row {
  color: var(--muted);
}

/* Fin nivel1-estetica */

/* === Nivel 3 Visual: Animaciones y helpers === */
@keyframes lnr-fade-up {
  0% { opacity: 0; transform: translateY(10px) scale(.98); }
  100% { opacity: 1; transform: translateY(0) scale(1); }
}
@keyframes lnr-fade-in {
  0% { opacity: 0 }
  100% { opacity: 1 }
}
@keyframes lnr-shine {
  0% { transform: translateX(-150%) }
  100% { transform: translateX(150%) }
}
.lnr-appear { animation: lnr-fade-up .5s ease-out both; }
.lnr-appear-slow { animation: lnr-fade-up .7s ease-out both; }
.lnr-appear-delay { animation-delay: .12s }
.lnr-appear-delay-lg { animation-delay: .2s }

.card-3d {
  transition: transform .25s ease, box-shadow .25s ease;
  will-change: transform;
}
.card-3d:hover {
  transform: translateY(-2px) scale(1.01);
  box-shadow: 0 12px 30px -12px rgb(0 0 0 / .25);
}
.img-zoom {
  transform: scale(1.02);
  transition: transform .5s ease, filter .5s ease;
}
.group:hover .img-zoom { transform: scale(1.08); }

.lnr-overlay-grad {
  background: linear-gradient(180deg, rgba(0,0,0,.0) 30%, rgba(0,0,0,.35) 75%, rgba(0,0,0,.55) 100%);
}

.lnr-shimmer {
  position: relative;
  overflow: hidden;
}
.lnr-shimmer::after {
  content: "";
  position: absolute; inset: 0;
  transform: translateX(-150%);
  background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,.18) 45%, rgba(255,255,255,0) 70%);
  animation: lnr-shine 1.25s ease-in-out infinite;
}

.badge-pill {
  border-radius: 9999px;
  padding: .35rem .6rem;
  font-weight: 600;
  font-size: .8rem;
}

/* Botón verde consistente con “Explorar categorías” */
.btn-brand {
  @apply inline-flex items-center gap-2 rounded-xl bg-lime-600 text-white px-3 py-2 hover:bg-lime-700 transition;
}

/* Etiqueta en tiles de categorías */
.cat-chip {
  @apply inline-flex items-center gap-2 rounded-xl bg-lime-600/95 text-white px-3 py-1.5 shadow-md;
}

/* === LUNARIA: visual-pack-level4 (do not remove) === */
/* Paleta y tokens */
:root {
  /* mismo verde que usamos en el Hero (lime-600 aprox) */
  --brand-green: #65a30d;
  --brand-green-600: #65a30d;
  --brand-green-700: #4d7c0f;
  --brand-ink: #0b0f19;
  --card-shadow: 0 8px 24px rgba(15, 23, 42, 0.08);
  --card-shadow-hover: 0 16px 40px rgba(15, 23, 42, 0.12);
}

/* Micro-animaciones base */
@keyframes lunaria-fade-in-up {
  from { opacity: 0; transform: translateY(8px); }
  to   { opacity: 1; transform: translateY(0); }
}

/* Botón/etiqueta de marca (para sobre-imagen o badges) */
.lunaria-btn,
.badge-brand {
  display: inline-flex;
  align-items: center;
  gap: .5rem;
  padding: .45rem .8rem;
  font-weight: 600;
  border-radius: 9999px;
  color: #fff;
  background-color: var(--brand-green);
  box-shadow: 0 4px 16px rgba(101,163,13,.25);
  transition: transform .12s ease, box-shadow .12s ease, background-color .12s ease;
}
.lunaria-btn:hover,
.badge-brand:hover {
  transform: translateY(-1px);
  background-color: var(--brand-green-700);
  box-shadow: 0 8px 24px rgba(101,163,13,.35);
}

/* Cards genéricas (product tiles, etc.) */
:where(.grid) :where(.border.rounded-2xl) {
  border-color: rgba(2,6,23,.06); /* slate-950/6 */
  transition: transform .18s ease, box-shadow .18s ease, border-color .18s ease, background-color .18s ease;
  box-shadow: var(--card-shadow);
  background: #fff;
}
:where(.grid) :where(.border.rounded-2xl):hover {
  transform: translateY(-2px);
  box-shadow: var(--card-shadow-hover);
  border-color: rgba(2,6,23,.10);
}

/* Imágenes en grillas 4:3 con zoom suave al hover */
:where(.aspect-\[4\/3\]) img,
:where(.aspect-\[4\/3\]) .object-cover {
  transition: transform .35s ease, filter .35s ease;
  will-change: transform;
}
```

=== FILE: gpt_bundle_part_1.txt ===
```
:where(li,div).border.rounded-2xl:hover :where(.aspect-\[4\/3\]) img,
:where(li,div).border.rounded-2xl:hover :where(.aspect-\[4\/3\]) .object-cover {
  transform: scale(1.03);
}

/* Precio destacado y tipografía suave */
.lunaria-price {
  color: var(--brand-green-700);
  font-weight: 800;
  letter-spacing: .1px;
}

/* Títulos compactos y legibles */
.lunaria-title {
  font-weight: 700;
  letter-spacing: .2px;
  color: var(--brand-ink);
}

/* Sutil divider entre info y CTA */
.lunaria-divider {
  height: 1px;
  background: linear-gradient(90deg, transparent, rgba(2,6,23,.08), transparent);
  margin: .5rem 0;
}

/* Hover de CTA negro (coherente con el tema actual) */
.lunaria-cta {
  background: #0b0f19;
  color: #fff;
  border-radius: .75rem;
  transition: transform .12s ease, box-shadow .12s ease, background-color .12s ease;
}
.lunaria-cta:hover {
  transform: translateY(-1px);
  background: #111827;
  box-shadow: 0 10px 24px rgba(17,24,39,.22);
}

/* Etiquetas sobre tiles de categorías: centradas y legibles */
.lunaria-cat-chip {
  position: absolute;
  left: 50%;
  bottom: .9rem;
  transform: translateX(-50%);
  z-index: 2;
  backdrop-filter: saturate(120%) blur(4px);
}
.lunaria-cat-chip .icon {
  display: inline-block;
  width: 1rem; height: 1rem;
}

/* Pequeño efecto parallax óptico al pasar el mouse */
.lunaria-tilt:hover { transform: perspective(900px) translateZ(0) rotateX(.6deg) rotateY(.6deg); }

/* Animación de aparición para grids */
.lunaria-grid-in > * {
  animation: lunaria-fade-in-up .35s ease both;
}
.lunaria-grid-in > *:nth-child(2) { animation-delay: .02s; }
.lunaria-grid-in > *:nth-child(3) { animation-delay: .04s; }
.lunaria-grid-in > *:nth-child(4) { animation-delay: .06s; }
.lunaria-grid-in > *:nth-child(5) { animation-delay: .08s; }
.lunaria-grid-in > *:nth-child(6) { animation-delay: .10s; }

/* Hero CTA: asegura el mismo verde global */
.lunaria-hero-cta {
  background-color: var(--brand-green) !important;
}
.lunaria-hero-cta:hover {
  background-color: var(--brand-green-700) !important;
}

/* Protección por si el texto de categorías queda oscuro sobre imágenes */
.lunaria-text-shadow {
  text-shadow: 0 1px 8px rgba(0,0,0,.35), 0 0 1px rgba(0,0,0,.6);
}

/* === /LUNARIA: visual-pack-level4 === */

/* tokens lunaria (idempotente) */
:root{
  --lunaria-green:#3eb489;
  --lunaria-green-hover:#36a178;
}

/* --- Neutraliza cualquier pseudo-badge que duplique el contador del carrito --- */
[data-testid="floating-cart"]::after,
[data-testid="floating-cart"]::before {
  content: none !important;
}

/* ========== Visual Pack Nivel 7–9 (no logic) ========== */
:root {
  --lunaria-radius-xl: 1.25rem;
  --lunaria-shadow-sm: 0 2px 10px rgba(0,0,0,.06);
  --lunaria-shadow-md: 0 6px 24px rgba(0,0,0,.08);
  --lunaria-shadow-lg: 0 12px 40px rgba(0,0,0,.12);
  --lunaria-anim-fast: 180ms;
  --lunaria-anim-med: 280ms;
}

/* Tipografía un poco más “retail” */
html {
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Tarjetas (categorías y productos) — hover sutil + elevación */
.grid .border.rounded-2xl,
.grid .rounded-2xl.border {
  border-radius: var(--lunaria-radius-xl) !important;
  box-shadow: var(--lunaria-shadow-sm);
  transition: transform var(--lunaria-anim-med) ease, box-shadow var(--lunaria-anim-med) ease, filter var(--lunaria-anim-med) ease;
  will-change: transform, box-shadow, filter;
  background: #fff;
}

.grid .border.rounded-2xl:hover,
.grid .rounded-2xl.border:hover {
  transform: translateY(-3px);
  box-shadow: var(--lunaria-shadow-md);
}

/* Imágenes dentro de tarjetas: zoom y “shine” suave */
.grid .border.rounded-2xl .bg-gray-100,
.grid .rounded-2xl.border .bg-gray-100 {
  overflow: hidden;
  position: relative;
}

.grid .border.rounded-2xl img,
.grid .rounded-2xl.border img {
  transition: transform var(--lunaria-anim-med) ease, filter var(--lunaria-anim-med) ease;
  will-change: transform, filter;
}

.grid .border.rounded-2xl:hover img,
.grid .rounded-2xl.border:hover img {
  transform: scale(1.03);
  filter: saturate(1.05) contrast(1.03);
}

/* Efecto “shine” diagonal opcional */
.grid .border.rounded-2xl .bg-gray-100::after,
.grid .rounded-2xl.border .bg-gray-100::after {
  content: "";
  position: absolute;
  inset: 0;
  background: linear-gradient(115deg, rgba(255,255,255,0) 20%, rgba(255,255,255,.18) 45%, rgba(255,255,255,0) 70%);
  transform: translateX(-120%);
  transition: transform 700ms ease;
  pointer-events: none;
}

@media (hover:hover) {
  .grid .border.rounded-2xl:hover .bg-gray-100::after,
  .grid .rounded-2xl.border:hover .bg-gray-100::after {
    transform: translateX(120%);
  }
}

/* Botones primarios coherentes (verde oficial del Hero) */
:root {
  --lunaria-green: #16a34a;       /* Tailwind green-600 del botón "Explorar categorías" */
  --lunaria-green-hover: #15803d; /* green-700 */
}

.btn-primary,
button.bg-lime-600,
a.bg-lime-600 {
  background-color: var(--lunaria-green) !important;
  color: #fff !important;
  border-radius: 0.85rem !important;
  box-shadow: 0 8px 18px rgba(22,163,74,.22);
  transition: transform var(--lunaria-anim-fast) ease, box-shadow var(--lunaria-anim-fast) ease, background-color var(--lunaria-anim-fast) ease;
}

.btn-primary:hover,
button.bg-lime-600:hover,
a.bg-lime-600:hover {
  background-color: var(--lunaria-green-hover) !important;
  transform: translateY(-1px);
  box-shadow: 0 10px 22px rgba(21,128,61,.28);
}

/* Badges / chips (envío, destacado) */
.badge,
p.text-sm.text-gray-600 {
  display: inline-flex;
  align-items: center;
  gap: .4rem;
  padding: .18rem .6rem;
  border-radius: 999px;
  background: rgba(16, 185, 129, .08); /* emerald-500/08 */
  color: #065f46; /* emerald-800 */
  font-weight: 600;
}

/* Header/sticky pulido (si existe sticky en tu layout) */
.sticky-header {
  backdrop-filter: saturate(1.2) blur(6px);
  background-color: rgba(255,255,255,.72);
  box-shadow: 0 2px 12px rgba(0,0,0,.05);
}

/* Micro animación para iconos (categorías) */
.category-icon {
  transition: transform var(--lunaria-anim-fast) ease;
}
.category-icon:hover {
  transform: scale(1.08) rotate(-1deg);
}

/* CTA en hero: ligero “breathing” */
@media (prefers-reduced-motion: no-preference) {
  .hero-cta-breathe {
    animation: breathe 3.2s ease-in-out infinite;
  }
  @keyframes breathe {
    0%   { transform: translateY(0) scale(1); box-shadow: var(--lunaria-shadow-md); }
    50%  { transform: translateY(-1px) scale(1.01); box-shadow: var(--lunaria-shadow-lg); }
    100% { transform: translateY(0) scale(1); box-shadow: var(--lunaria-shadow-md); }
  }
}

/* Sombra fine-grain al mover el mouse (soporte amplio usando :hover) */
.card-hover:hover {
  box-shadow: var(--lunaria-shadow-lg);
}

/* Foco accesible bonito */
:focus-visible {
  outline: 3px solid rgba(22,163,74,.45);
  outline-offset: 3px;
  border-radius: 8px;
}

/* ========== /Visual Pack Nivel 7–9 ========== */

/* === NIVEL100:BEGIN === */
/* Paleta y motion helpers (no invasivo) */
:root {
  --lnr-green: #3e8e41; /* verde hero */
  --lnr-green-ink: #2f6b32;
  --lnr-ink: #0f172a;   /* neutral-900 */
```

=== FILE: app/globalsCSS.txt ===
```
  --lnr-card: 255,255,255;
  --lnr-shadow: 15 23 42; /* slate-900 */
}

/* Suaviza todo */
html { scroll-behavior: smooth; }

/* Cards genéricas: .border.rounded-2xl */
.border.rounded-2xl {
  transition:
    transform 220ms cubic-bezier(.2,.7,.2,1),
    box-shadow 220ms cubic-bezier(.2,.7,.2,1),
    background-color 220ms ease;
  will-change: transform, box-shadow;
  background-color: rgba(var(--lnr-card),1);
  box-shadow:
    0 1px 2px rgba(var(--lnr-shadow)/0.06),
    0 8px 24px rgba(var(--lnr-shadow)/0.04);
}
.border.rounded-2xl:hover {
  transform: translateY(-4px);
  box-shadow:
    0 6px 16px rgba(var(--lnr-shadow)/0.06),
    0 18px 48px rgba(var(--lnr-shadow)/0.08);
}

/* Imágenes dentro de cards: zoom sutil al hover del contenedor */
.border.rounded-2xl img,
.border.rounded-2xl picture img {
  transition: transform 300ms ease, filter 300ms ease, opacity 200ms ease;
  will-change: transform, filter;
}
.border.rounded-2xl:hover img {
  transform: scale(1.03);
  filter: saturate(1.05);
}

/* Botones “primarios” por patrón de color verde hero */
button.bg-lime-600,
a.bg-lime-600,
[class*="bg-lime-600"] {
  background-color: var(--lnr-green) !important;
  border-color: var(--lnr-green-ink) !important;
  transition: transform 150ms ease, box-shadow 150ms ease, background-color 150ms ease;
  box-shadow: 0 4px 14px rgba(62,142,65,.15);
}
button.bg-lime-600:hover,
a.bg-lime-600:hover,
[class*="bg-lime-600"]:hover {
  background-color: var(--lnr-green-ink) !important;
  transform: translateY(-1px);
  box-shadow: 0 8px 22px rgba(62,142,65,.25);
}
button.bg-lime-600:active,
a.bg-lime-600:active,
[class*="bg-lime-600"]:active {
  transform: translateY(0);
  box-shadow: 0 3px 10px rgba(62,142,65,.18);
}

/* Etiquetas de categoría “pill” si van dentro de tiles */
.badge-pill,
[class*="badge"][class*="pill"] {
  background: linear-gradient(180deg, var(--lnr-green), var(--lnr-green-ink));
  color: #fff;
  border-radius: 9999px;
  box-shadow: 0 6px 20px rgba(62,142,65,.25);
}

/* Skeleton shimmer reutilizable (añade class="skeleton" a placeholders si lo necesitas) */
@keyframes lnr-shimmer {
  0% { background-position: -200% 0; }
  100% { background-position: 200% 0; }
}
.skeleton {
  position: relative;
  overflow: hidden;
  background: linear-gradient(90deg,
    rgba(226,232,240,.7) 0%,
    rgba(241,245,249,.9) 20%,
    rgba(226,232,240,.7) 40%,
    rgba(226,232,240,.7) 100%);
  background-size: 200% 100%;
  animation: lnr-shimmer 1.2s infinite linear;
}

/* Micro bounce al agregar al carro (aplica a .added-bounce si la pones en el botón tras click) */
@keyframes lnr-bounce {
  0% { transform: scale(1); }
  30% { transform: scale(1.08); }
  60% { transform: scale(0.98); }
  100% { transform: scale(1); }
}
.added-bounce { animation: lnr-bounce 360ms cubic-bezier(.2,.7,.2,1); }

/* Back-to-top si existe un #backToTop */
#backToTop {
  transition: opacity .2s ease, transform .2s ease;
  box-shadow: 0 8px 24px rgba(15,23,42,.18);
}
#backToTop:hover { transform: translateY(-2px); }

/* Grid hover: realzar item activo */
.grid > *:hover { position: relative; z-index: 2; }

/* Hero: sutil parallax sobre imágenes directas */
.hero img { transition: transform 600ms cubic-bezier(.2,.7,.2,1); will-change: transform; }
.hero:hover img { transform: scale(1.02); }
/* === NIVEL100:END === */


/* === Nivel 9999999: Parallax + Gradiente Animado (solo visual) === */
@keyframes lunariaGradientPulse {
  0%   { opacity: .65; }
  50%  { opacity: .85; }
  100% { opacity: .65; }
}




/* Respeto accesibilidad (reduce motion) */

/* Botón “Explorar categorías” – reforzamos feeling premium sin cambiar tu verde */
.lunaria-cta {
  transition: transform .2s ease, box-shadow .2s ease;
  box-shadow: 0 8px 20px rgba(101,163,13,0.25);
}
.lunaria-cta:hover {
  transform: translateY(-1px);
  box-shadow: 0 10px 24px rgba(101,163,13,0.33);
}

/* Copete del hero con un toque de brillo sutil */
.lunaria-hero-subtle {
  text-shadow: 0 1px 0 rgba(255,255,255,.6);
}
/* === Fin Nivel 9999999 === */

/* === A11y & Micro-UX (bundle) === */
:focus-visible {
  outline: 3px solid #2ECC71;
  outline-offset: 2px;
  border-radius: .5rem;
}
html { scroll-behavior: smooth; }

/* Helpers de contraste en chips/badges si hiciera falta */
.badge-contrast {
  text-shadow: 0 1px 1px rgba(0,0,0,.25);
}

/* Skeleton util (por si queremos placeholder más tarde) */
.skeleton {
  position: relative;
  overflow: hidden;
  background: #f2f2f2;
}
.skeleton::after {
  content: "";
  position: absolute;
  inset: 0;
  transform: translateX(-100%);
  background: linear-gradient(90deg, transparent, rgba(0,0,0,.06), transparent);
  animation: skeleton-shimmer 1.1s infinite;
}
@keyframes skeleton-shimmer {
  100% { transform: translateX(100%); }
}

/* === BackToTop: forzar visibilidad y evitar solape con carrito === */
:where(.back-to-top, #backtotop, [data-backtotop], a[href="#top"]){
  position: fixed !important;
  left: 1rem !important;
  right: auto !important;
  bottom: 1rem !important;
  transform: none !important;
  opacity: 1 !important;
  visibility: visible !important;
  pointer-events: auto !important;
  display: inline-flex !important;
  align-items: center;
  justify-content: center;
  z-index: 95 !important;
  border-radius: 9999px;
  box-shadow: 0 6px 18px rgba(0,0,0,.12);
}
@media (min-width: 768px){
  :where(.back-to-top, #backtotop, [data-backtotop], a[href="#top"]){
    left: auto !important;
    right: 6.5rem !important; /* offset para FloatingCart */
  }
}
@supports (padding: env(safe-area-inset-bottom)){
  :where(.back-to-top, #backtotop, [data-backtotop], a[href="#top"]){
    bottom: calc(1rem + env(safe-area-inset-bottom)) !important;
  }
}

/* breadcrumbs */
.breadcrumb-hero {
  /* separador opcional si se usa sobre fondos */
  text-shadow: 0 1px 0 rgba(255,255,255,.8);
}

/* títulos de sección home pro */
.section-title {
  @apply text-xl sm:text-2xl font-semibold tracking-tight;
}
.section-sub {
  @apply text-gray-600 text-sm;
}

/* PARALLAX UTILITIES */
.parallax-root { perspective: 1000px; }
.parallax-scene { transform-style: preserve-3d; height: 100%; position: relative; }
.parallax-bg {
  position: absolute; inset: 0;
  background-position: center; background-size: cover; background-repeat: no-repeat;
  transform: translateZ(-300px) scale(1.35);
  will-change: transform;
  filter: saturate(105%) contrast(102%);
}
.parallax-fg { position: relative; z-index: 1; }
@media (min-width: 768px) {
  /* Fallback extra suave por si el navegador ignora 3D: */
  .parallax-bg-fixed { background-attachment: fixed; }
}

/* PARALLAX UTILITIES v2 */
.parallax-root { perspective: 800px; }
.parallax-scene { transform-style: preserve-3d; height: 100%; position: relative; }
.parallax-bg {
  position: absolute; inset: 0;
  background-position: center 30%;
  background-size: cover;
  background-repeat: no-repeat;
  transform: translateZ(-120px) scale(1.12);
  will-change: transform;
  transition: transform 300ms ease-out;
  filter: saturate(104%) contrast(102%);
}
/* Suaviza bordes y da respiro visual */
.hero-clip { border-radius: 1rem; overflow: hidden; }
/* Degradado más sutil (menos “leche” sobre la foto) */
.hero-fade::after{
  content:"";
  position:absolute; inset:0;
```

=== FILE: gpt_bundle_part_1.txt ===
```
  background: linear-gradient(to top, rgba(255,255,255,0.9) 0%, rgba(255,255,255,0.55) 45%, rgba(255,255,255,0.15) 100%);
  pointer-events:none;
}
/* En móviles desactivamos 3D: se ve más limpio */
@media (max-width: 767px) {
  .parallax-root { perspective: none; }
  .parallax-scene { transform-style: flat; }
  .parallax-bg { transform: none; }
  .parallax-bg-fixed { background-attachment: scroll; }
}
/* Respeto a usuarios con reduce-motion */

/* Respeto accesibilidad (reduce motion) */

/* Hero parallax limpio */



/* Respeto accesibilidad (reduce motion) */

/* Hero parallax limpio */



/* Respeto accesibilidad (reduce motion) */

/* Respeto accesibilidad (reduce motion) */

/* Hero parallax con imagen Supabase (limpio y acotado) */



/* Respeto accesibilidad (reduce motion) */

/* Respeto accesibilidad (reduce motion) */


/* Respeto accesibilidad (reduce motion) */

/* === Hero parallax con imagen Supabase (limpio y único) === */
/* Contenedor: el ::before pinta el fondo. La altura/offset se definen en TSX. */
.lunaria-parallax {
  position: relative;
  overflow: hidden;
}

/* Fondo del Hero (imagen desde Supabase) */
.lunaria-parallax::before {
  content: "";
  position: absolute;
  inset: 0;
  background-image: url("https://iowpylofmfzlbvlhlqih.supabase.co/storage/v1/object/public/branding/hero/hero.png");
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
  /* Orden de capas: fondo z-0, overlay z-10 (en TSX), contenido z-20 */
  z-index: 0;
  pointer-events: none;

  /* Nitidez y respuesta */
  image-rendering: crisp-edges;
  filter: saturate(1.15) contrast(1.1);
  transition: transform 1.2s ease, filter 0.5s ease;
}

/* Hover sutil (parallax óptico) */
.lunaria-parallax:hover::before {
  transform: scale(1.05) translateY(-5px);
  filter: saturate(1.2) contrast(1.15);
}

/* Accesibilidad: reducir movimiento */
@media (prefers-reduced-motion: reduce) {
  .lunaria-parallax::after { animation: none; }
  .lunaria-parallax::before { transform: none !important; background-attachment: scroll; }
}
```

=== FILE: app/head.tsx ===
```
export default function Head() {
  return (
    <>
      <title>Lunaria</title>
      <meta name="description" content="E-commerce sustentable" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <link rel="icon" href="/favicon.ico" />
    </>
  );
}
```

=== FILE: app/layout.tsx ===
```
import "./globals.css";
import TopBar from "@/components/TopBar";
import Footer from "@/components/Footer";

export const metadata = {
  title: "Lunaria",
  description: "Cosas útiles y bonitas. E-commerce sustentable con envíos simples.",
};

export const viewport = {
  width: "device-width",
  initialScale: 1,
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="es">
      <head>
        <meta name="description" content="Descubre productos útiles, bonitos y sustentables en Lunaria. Envíos simples, calidad real." />
      </head>
      <body className="font-sans bg-gray-50 text-gray-900 antialiased">
        <TopBar />
        {children}
        <Footer />
      </body>
    </html>
  );
}
```

=== FILE: app/not-found.tsx ===
```
"use client";

export default function NotFound() {
  return (
    <main className="max-w-5xl mx-auto px-4 py-20 text-center">
      <h1 className="text-3xl font-bold mb-4">Página no encontrada</h1>
      <p className="text-gray-600 mb-6">
        La página que buscas no existe o fue movida.
      </p>
      <a
        href="/"
        className="inline-block px-4 py-2 bg-lime-600 text-white rounded-lg"
      >
        Volver al inicio
      </a>
    </main>
  );
}
```

=== FILE: app/page.tsx ===
```
import Hero from "@/components/Hero";
import CategoryCarousel from "@/components/CategoryCarousel";
import ProductCard from "@/components/ProductCard";
import { supabaseServer } from "@/lib/supabase/server";

export default async function HomePage() {
  const supabase = supabaseServer();

  const fetchCategory = async (slug: string) => {
    const { data, error } = await supabase
      .from("products")
      .select("id, name, image_url, price_cents, category_slug")
      .eq("category_slug", slug)
      .not("image_url", "is", null)
      .order("price_cents", { ascending: true })
      .limit(6);

    if (error) {
      console.error("Error cargando", slug, error.message);
      return [];
    }
    return data ?? [];
  };

  const belleza = await fetchCategory("belleza");
  const bienestar = await fetchCategory("bienestar");
  const eco = await fetchCategory("eco");
  const hogar = await fetchCategory("hogar");
  const mascotas = await fetchCategory("mascotas");
  const tecnologia = await fetchCategory("tecnologia");

  // 👇 Nuevo: traer todos los productos
  const { data: allProducts, error: allError } = await supabase
    .from("products")
    .select("id, name, image_url, price_cents, category_slug")
    .order("created_at", { ascending: false })
    .limit(20);

  if (allError) {
    console.error("Error cargando todos los productos:", allError.message);
  }

  return (
    <main>
      <Hero />

      <CategoryCarousel
        title="Para tu rutina de belleza"
        description="Cuida tu piel y estilo con productos ecológicos"
        products={belleza}
        link="/categorias/belleza"
      />

      <CategoryCarousel
        title="Bienestar diario"
        description="Hidratación, descanso y energía para tu día"
        products={bienestar}
        link="/categorias/bienestar"
      />

      <CategoryCarousel
        title="Hogar sustentable"
        description="Productos reutilizables que cuidan el planeta"
        products={eco}
        link="/categorias/eco"
      />

      <CategoryCarousel
        title="Ambientes que relajan"
        description="Aromas, luz y orden para tu espacio personal"
        products={hogar}
        link="/categorias/hogar"
      />

      <CategoryCarousel
        title="Para tu compañero fiel"
        description="Accesorios seguros y cómodos para tu mascota"
        products={mascotas}
        link="/categorias/mascotas"
      />

      <CategoryCarousel
        title="Tecnología útil y portátil"
        description="Gadgets que simplifican tu vida, sin complicaciones"
        products={tecnologia}
        link="/categorias/tecnologia"
      />

      {/* 👇 Nuevo bloque: grid general */}
      {allProducts && allProducts.length > 0 && (
        <section className="p-6">
          <h2 className="text-2xl font-bold mb-4">Todos los productos</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {allProducts.map((p) => (
              <ProductCard
                key={p.id}
                id={p.id}
                name={p.name}
                image_url={p.image_url || "/lunaria-icon.png"}
                price_cents={p.price_cents}
              />
            ))}
          </div>
        </section>
      )}
    </main>
  );
}
```

=== FILE: app/producto/[id]/loading.tsx ===
```
export default function Loading() {
  return (
    <div className="grid md:grid-cols-2 gap-6">
      <div className="rounded-2xl border bg-white overflow-hidden">Cargando...</div>
    </div>
  );
}
```

=== FILE: app/producto/[id]/page.tsx ===
```
import { supabaseServer } from "@/lib/supabase/server";
import ProductDetailClient from "@/components/ProductDetailClient";
import Breadcrumb from "@/components/Breadcrumb";

export default async function ProductoPage({ params }: { params: { id: string } }) {
  const supabase = supabaseServer();

  // Traer producto con category_slug
  const { data: producto, error: prodError } = await supabase
    .from("products")
    .select("id, name, name_es, description, image_url, price_cents, category_slug") // 👈 añadimos name_es
    .eq("id", params.id)
    .single();

  if (prodError || !producto) {
    console.error("[Producto] Error:", prodError?.message);
    return (
      <main className="mx-auto max-w-6xl px-4 sm:px-6 py-12">
        <Breadcrumb
          items={[
            { label: "Inicio", href: "/" },
            { label: "Categorías", href: "/categorias" },
            { label: "Producto" },
          ]}
        />
        <p className="text-gray-600">Producto no encontrado.</p>
      </main>
    );
  }

  // Resolver categoría
  let categoriaNombre: string | null = null;
  let categoriaSlug: string | null = null;

  if (producto.category_slug) {
    const { data: categoria, error: catError } = await supabase
      .from("categories")
      .select("nombre, slug")
      .eq("slug", producto.category_slug)
      .single();

    if (!catError && categoria) {
      categoriaNombre = categoria.nombre;
      categoriaSlug = categoria.slug;
    }
  }

  return (
    <main className="mx-auto max-w-6xl px-4 sm:px-6 py-12">
      <Breadcrumb
        items={[
          { label: "Inicio", href: "/" },
          { label: "Categorías", href: "/categorias" },
          categoriaNombre && categoriaSlug
            ? { label: categoriaNombre, href: `/categorias/${categoriaSlug}` }
            : { label: "Categoría" },
          { label: producto.name_es || producto.name }, // 👈 usamos traducción si existe
        ]}
      />
      <ProductDetailClient producto={producto} /> {/* 👈 ahora recibe también name_es */}
    </main>
  );
}
```

=== FILE: cj_import/cj_auth.ts ===
```
// cj_auth.ts
import fs from "fs";
import path from "path";
import "dotenv/config";

const AUTH_URL = "https://developers.cjdropshipping.com/api2.0/v1/authentication/getAccessToken";

const CJ_EMAIL = process.env.CJ_EMAIL;
const CJ_API_KEY = process.env.CJ_API_KEY;

if (!CJ_EMAIL || !CJ_API_KEY) {
  console.error("❌ CJ_EMAIL o CJ_API_KEY no están definidos en .env");
  process.exit(1);
}

async function getAccessToken() {
  const res = await fetch(AUTH_URL, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email: CJ_EMAIL, apiKey: CJ_API_KEY }),
  });

  const json = await res.json();
  if (!json.result || !json.data?.accessToken) {
    console.error(`❌ Error al obtener token: ${json.message || "sin mensaje"}`);
    process.exit(1);
  }

  const token: string = String(json.data.accessToken).trim();
  console.log("✅ Token obtenido:", token);

  const envPath = path.resolve(process.cwd(), ".env");
  let envContent = fs.readFileSync(envPath, "utf-8");

  // Reemplazo limpio, sin comillas ni espacios extras
  if (envContent.includes("CJ_ACCESS_TOKEN=")) {
    envContent = envContent.replace(/CJ_ACCESS_TOKEN=.*/g, `CJ_ACCESS_TOKEN=${token}`);
  } else {
    envContent += `\nCJ_ACCESS_TOKEN=${token}\n`;
  }

  fs.writeFileSync(envPath, envContent, { encoding: "utf-8" });
  console.log("📝 .env actualizado con el nuevo CJ_ACCESS_TOKEN");
}

getAccessToken();
```

=== FILE: cj_import/cj_cleanup.ts ===
```
import "dotenv/config";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

async function limpiar() {
  console.log("🧹 Iniciando limpieza de datos CJdropshipping...");

  // Borrar todos los productos
  const { error: prodError } = await supabase
    .from("products")
    .delete()
    .not("id", "is", null);

  if (prodError) {
    console.error("❌ Error al borrar products:", prodError.message);
  } else {
    console.log("✅ products limpiado correctamente");
  }

  // Borrar auditoría
  const { error: auditError } = await supabase
    .from("product_changes")
    .delete()
    .not("id", "is", null);

  if (auditError) {
    console.error("❌ Error al borrar product_changes:", auditError.message);
  } else {
    console.log("✅ product_changes limpiado correctamente");
  }

  // Borrar errores
  const { error: errError } = await supabase
    .from("product_errors")
    .delete()
    .not("id", "is", null);

  if (errError) {
    console.error("❌ Error al borrar product_errors:", errError.message);
  } else {
    console.log("✅ product_errors limpiado correctamente");
  }

  console.log("🎉 Limpieza finalizada.");
}

limpiar();
```

=== FILE: cj_import/cj_config.ts ===
```
// cj_config.ts

// Base URL correcta de API 2.0
export const CJ_BASE_URL = "https://developers.cjdropshipping.com/api2.0/v1";

// Token de acceso CJ
export const CJ_ACCESS_TOKEN = process.env.CJ_ACCESS_TOKEN || "";

// Mapeo de categorías CJ a tus slugs reales
export const CATEGORY_MAP: Record<string, string> = {
  // 🧴 Belleza
  "beauty": "belleza",
  "makeup": "belleza",
  "skincare": "belleza",
  "hair care": "belleza",
  "jewelry": "belleza",
  "bracelets & bangles": "belleza",
  "rings": "belleza",
  "necklaces": "belleza",
  "earrings": "belleza",
  "watches": "belleza",
  "nail art": "belleza",
  "cosmetics": "belleza",

  // 💆 Bienestar
  "facial steamer": "bienestar",
  "massage": "bienestar",
  "health care": "bienestar",
  "fitness": "bienestar",
  "yoga": "bienestar",
  "personal care": "bienestar",
  "sports": "bienestar",
  "outdoor fitness": "bienestar",

  // 🌱 Eco
  "eco-friendly": "eco",
  "sustainable": "eco",
  "reusable": "eco",
  "green products": "eco",
  "environmental": "eco",

  // 🏠 Hogar
  "home office storage": "hogar",
  "night lights": "hogar",
  "lighting": "hogar",
  "kitchen": "hogar",
  "bathroom": "hogar",
  "furniture": "hogar",
  "home decor": "hogar",
  "storage": "hogar",
  "garden": "hogar",
  "holiday decoration": "hogar",
  "party supplies": "hogar",
  "men's backpacks": "hogar",
  "bags": "hogar",
  "shoes": "hogar",
  "clothing": "hogar",
```

