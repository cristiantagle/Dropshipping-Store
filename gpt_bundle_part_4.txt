# GPT bundle - Parte 4
# Archivos incluidos: 5
# Generado: 2025-09-24T18:19:56Z

=== FILE: README.md ===
```
# üåô Lunaria ‚Äî Tienda Dropshipping

Tienda online construida con **Next.js (App Router)**, **Supabase** y la base visual **Lunaria**.
Optimizada para simplicidad, escalabilidad y despliegue autom√°tico en **Vercel**.

## üöÄ Caracter√≠sticas
- Next.js 13+ con App Router
- Supabase como backend
- Precios en CLP (`fmtCLP` centralizado)
- Carrito persistente (`useCart`) + Toast
- UI Lunaria: tokens, animaciones, accesibilidad
- SEO b√°sico con `head.tsx`
- Previews autom√°ticos en ramas `preview/...`

## üìÇ Estructura
- `app/` ‚Üí p√°ginas (home, producto, head, globals.css)
- `components/` ‚Üí ProductCard, ProductListClient, Hero, PreviewDebug, Toast, useCart
- `lib/` ‚Üí format.ts, supabase-wrapper.ts

## üõ†Ô∏è Desarrollo local
\`\`\`bash
npm install
npm run dev
npm run build
\`\`\`

## üåø Flujo Lunaria
1. `bash archivosgpt.sh`
2. `bash run.sh`
3. Revisar preview en Vercel
4. Aprobar con **‚ÄúLUNARIA ok‚Äù** ‚Üí merge a main

```

=== FILE: scripts/inject-env.mjs ===
```
import { writeFileSync } from "node:fs";

const envLines = [
  `# Generado autom√°ticamente en build por scripts/inject-env.mjs`,
  `NEXT_PUBLIC_VERCEL_ENV=${process.env.VERCEL_ENV || ""}`,
  `NEXT_PUBLIC_VERCEL_GIT_COMMIT_REF=${process.env.VERCEL_GIT_COMMIT_REF || ""}`,
  `NEXT_PUBLIC_VERCEL_GIT_COMMIT_SHA=${process.env.VERCEL_GIT_COMMIT_SHA || ""}`
].join("\n") + "\n";

try {
  writeFileSync(".env.local", envLines, { encoding: "utf8" });
  console.log("üß™ .env.local generado para PreviewBadge:");
  console.log(envLines);
} catch (e) {
  console.error("No se pudo escribir .env.local:", e);
}

```

=== FILE: styles/Home.module.css ===
```
.container {
  min-height: 100vh;
  padding: 0 2rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.main {
  padding: 5rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.title {
  margin: 0;
  line-height: 1.15;
  font-size: 3rem;
  text-align: center;
}

.description {
  text-align: center;
  font-size: 1.5rem;
  margin-top: 1rem;
  color: #666;
}

.products {
  margin-top: 2rem;
}

.productList {
  display: flex;
  flex-wrap: wrap;
  gap: 1.5rem;
  justify-content: center;
}

.productCard {
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 1rem;
  width: 180px;
  text-align: center;
  box-shadow: 2px 2px 8px rgba(0,0,0,0.1);
}

.productCard img {
  border-radius: 5px;
  margin-bottom: 0.5rem;
}

.cart {
  margin-top: 2rem;
  text-align: center;
}

.cart ul {
  list-style: none;
  padding: 0;
}

.cart li {
  margin-bottom: 0.5rem;
}

.cart button {
  margin-left: 1rem;
  background-color: #ff6b6b;
  border: none;
  padding: 0.3rem 0.8rem;
  border-radius: 4px;
  color: white;
  cursor: pointer;
}

.cart button:hover {
  background-color: #e55;
}

.footer {
  width: 100%;
  height: 60px;
  border-top: 1px solid #eaeaea;
  display: flex;
  justify-content: center;
  align-items: center;
  color: #999;
}

```

=== FILE: tailwind.config.ts ===
```
import type { Config } from "tailwindcss";
export default {
  content: ["./app/**/*.{ts,tsx}", "./components/**/*.{ts,tsx}"],
  theme: { extend: {} },
  plugins: []
} satisfies Config;

```

=== FILE: tsconfig.json ===
```
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": [
      "DOM",
      "ES2022"
    ],
    "jsx": "preserve",
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./*"
      ]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "playwright.config.ts",
    "tests",
    "**/*.spec.ts",
    "**/*.spec.tsx"
  ]
}
```

